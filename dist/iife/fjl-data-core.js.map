{"version":3,"file":"fjl-data-core.js","sources":["../../src/functor/Functor.js","../../src/functor/Apply.js","../../src/functor/Applicative.js","../../src/functor/Bifunctor.js","../../src/monad/Monad.js","../../src/io/IO.js","../../src/maybe/Nothing.js","../../src/maybe/Just.js","../../src/maybe/Maybe.js","../../src/either/Either.js","../../src/fjlDataCore.js"],"sourcesContent":["/**\r\n * Functor class and associated operations.\r\n * Created by edlc on 12/9/16.\r\n * @module functor\r\n */\r\n\r\n/**\r\n * Always returns a functor;  If given value is not\r\n * a functor creates one from given value to it.\r\n * @function module:functor.toFunctor\r\n * @param x {{map: Function}|*} - Functor or any.\r\n * @returns {*}\r\n */\r\nexport const toFunctor = x => !x.map ? new Functor(x) : x;\r\n\r\n/**\r\n * Plain old functor class.\r\n * @class module:functor.Functor\r\n * @param value {*}\r\n * @property value {*}\r\n */\r\nexport default class Functor {\r\n\r\n    /**\r\n     * @constructor\r\n     * @param value {*}\r\n     */\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * Extracts value of functor (same as monadic `join`).\r\n     * @method module:functor.Functor#valueOf\r\n     * @returns {*}\r\n     */\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * Maps a function over contents of functor.\r\n     * @method module:functor.Functor#map\r\n     * @param fn {Function} - Function that takes one `any` and returns one `any`.\r\n     * @returns {Functor}\r\n     */\r\n    map(fn) {\r\n        return new this.constructor(fn(this.valueOf()));\r\n    }\r\n\r\n    /**\r\n     * Same as `#Functor.map`.\r\n     * @method module:functor.Functor#fmap\r\n     * @param fn {Function}\r\n     * @returns {Functor}\r\n     */\r\n    fmap (fn) {\r\n        return this.map(fn);\r\n    }\r\n}\r\n","/**\r\n * Contains `Applicative`'s `Apply` class (class that contains `ap` (a.k.a. `pure`) method).\r\n * Created by edlc on 12/9/16.\r\n * @memberOf module:functor\r\n */\r\n\r\nimport {toFunction} from 'fjl';\r\nimport Functor from './Functor';\r\n\r\n/**\r\n * Apply construct.\r\n * @class module:functor.Apply\r\n * @param fn {Function|*}\r\n * @property value {*}\r\n * @extends module:functor.Functor\r\n */\r\nexport default class Apply extends Functor {\r\n    /**\r\n     * Applicative apply operation - applies contained function over passed in functor.\r\n     * @method module:functor.Apply#ap\r\n     * @param x {Functor}\r\n     * @returns {Apply}\r\n     */\r\n    ap (x) {\r\n        return x.map(toFunction(this.valueOf()));\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * Applicative class module.\r\n * @memberOf module:functor\r\n */\r\nimport Apply from './Apply';\r\n\r\n/**\r\n * @class module:functor.Applicative\r\n * @extends module:functor.Apply\r\n */\r\nexport default class Applicative extends Apply {\r\n    /**\r\n     * Constructs an applicative with given `value`.\r\n     * @method module:functor.Applicative.of\r\n     * @param value {*}\r\n     * @returns {Applicative}\r\n     * @static\r\n     */\r\n    static of (value) {\r\n        return new Applicative(value);\r\n    }\r\n\r\n    static liftA2 (fn, appA, appB) {\r\n        return appA.constructor.of(\r\n            fn(appA.valueOf(), appB.valueOf)\r\n        );\r\n    }\r\n\r\n    static apRight (appA, appB) {\r\n        return appB;\r\n    }\r\n\r\n    static apLeft (appA, appB) {\r\n        return appA;\r\n    }\r\n}\r\n\r\nexport const\r\n\r\n    pureApp = Applicative.of,\r\n\r\n    liftA2 = Applicative.liftA2,\r\n\r\n    apLeft = Applicative.apLeft,\r\n\r\n    apRight = Applicative.apRight\r\n\r\n;\r\n\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * @memberOf module:functor\r\n */\r\nimport Functor from './Functor';\r\n\r\n/**\r\n * Bifunctor class;  Mostly useful for eithers and/or maybes.\r\n * @class module:functor.Bifunctor\r\n * @param value1 {*}\r\n * @param value2 {*}\r\n * @property value {*}\r\n * @property value2 {*}\r\n * @extends module:functor.Functor\r\n */\r\nexport default class Bifunctor extends Functor {\r\n\r\n    /**\r\n     * @param value1 {*}\r\n     * @param value2 {*}\r\n     * @private\r\n     * @returns {Bifunctor}\r\n     */\r\n    constructor(value1, value2) {\r\n        super(value1);\r\n        this.value2 = value2;\r\n    }\r\n\r\n    /**\r\n     * Returns wrapped 'second' value.\r\n     * @method module:functor.Bifunctor#value2Of\r\n     * @returns {*}\r\n     */\r\n    value2Of() {\r\n        return this.value2;\r\n    }\r\n\r\n    /**\r\n     * Allows you to map over first 'contained' value.\r\n     * @method module:functor.Bifunctor#first\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Bifunctor}\r\n     */\r\n    first (fn) {\r\n        return new this.constructor(fn(this.valueOf()), this.value2Of());\r\n    }\r\n\r\n    /**\r\n     * Allows you to map over second 'contained' value.\r\n     * @method module:functor.Bifunctor#second\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Bifunctor}\r\n     */\r\n    second (fn) {\r\n        return new this.constructor(this.valueOf(), fn(this.value2Of()));\r\n    }\r\n\r\n    /**\r\n     * Allows you to map 2 functions over contained values - One function over each value.\r\n     * @method module:functor.Bifunctor#bimap\r\n     * @param fn1 {Function} - Unary op.\r\n     * @param fn2 {Function} - Unary op.\r\n     * @returns {Bifunctor}\r\n     */\r\n    bimap (fn1, fn2) {\r\n        return new this.constructor(\r\n            fn1(this.valueOf()),\r\n            fn2(this.value2Of())\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * Contains basic `Monad` class and associated methods.\r\n * For 'what is a monad'/back-story\r\n * @see `Maybe` reference: [http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Maybe.html](http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Maybe.html)\r\n * @see `Either` reference: [http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Either.html](http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Either.html)\r\n * @module monad\r\n */\r\n\r\nimport {isset, curry, instanceOf, trampoline} from 'fjl';\r\nimport Applicative from '../functor/Applicative';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns boolean indicating whether given value is an\r\n     * instance of monad or not.\r\n     * @function module:monad.isMonad\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    isMonad = value => value && value instanceof Monad,\r\n\r\n    /**\r\n     * Always returns a monad;  If given value is not\r\n     * a monad creates one using given value.\r\n     * @function module:monad.toMonad\r\n     * @param x {Monad|*} - Monad or any.\r\n     * @returns {*}\r\n     */\r\n    toMonad = x => !isMonad(x) ? new Monad(x) : x,\r\n\r\n    /**\r\n     * Calls `valueOf` on value (use for functional composition).\r\n     * @function module:monad.valueOf\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    valueOf = x => x.valueOf(),\r\n\r\n    /**\r\n     * Calls `valueOf` on given value.  Same as\r\n     * monadic `join` operation (extracts inner value of\r\n     * container/object).\r\n     * @function module:monad.join\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    join = valueOf,\r\n\r\n    /**\r\n     * Maps given function over given functor.\r\n     * @function module:monad.fmap\r\n     * @param fn {Function}\r\n     * @param x {Functor}\r\n     * @returns {Functor}\r\n     */\r\n    fmap = curry((fn, x) => x.map(fn)),\r\n\r\n    /**\r\n     * Applies function contained by applicative to contents of given functor.\r\n     * (Same as functional applicative `apply`).\r\n     * @function module:monad.ap\r\n     * @param applicative {Applicative}\r\n     * @param functor {Functor}\r\n     * @returns {Applicative}\r\n     */\r\n    ap = curry((applicative, functor) => applicative.ap(functor)),\r\n\r\n    /**\r\n     * Flat maps a function over given monad's contained value.\r\n     * @function module:monad.flatMap\r\n     * @param fn {Function}\r\n     * @param monad {Monad}\r\n     * @returns {Monad}\r\n     */\r\n    flatMap = curry((fn, monad) => monad.flatMap(fn)),\r\n\r\n    /**\r\n     * A recursive monad un-wrapper - Returns monad's unwrapped, inner-mostly, contained value (recursively).\r\n     * @function module:monad.getMonadUnWrapper\r\n     * @param Type {Function}\r\n     * @returns {Array.<*>} - [unWrapFunction, tailCallFuncName (used by `trampoline` @see module:fjl.trampoline)]\r\n     */\r\n    getMonadUnWrapper = Type => {\r\n        return [ function unWrapMonadByType(monad) {\r\n                return instanceOf(Type, monad) ?\r\n                    function trampolineCall() {\r\n                        return unWrapMonadByType(monad.valueOf());\r\n                    } :\r\n                    monad;\r\n            }, 'trampolineCall' ];\r\n    },\r\n\r\n    /**\r\n     * Unwraps monad by type.\r\n     * @function module:monad.unWrapMonadByType\r\n     * @param Type {Function}\r\n     * @param monad {Monad}\r\n     * @returns {*}\r\n     */\r\n    unWrapMonadByType = (Type, monad) => {\r\n        if (!isset(monad)) {\r\n            return monad;\r\n        }\r\n        const [unWrapper, tailCallName] = getMonadUnWrapper(Type),\r\n            unwrap = trampoline(unWrapper, tailCallName);\r\n        return unwrap(monad);\r\n    };\r\n\r\n/**\r\n * @class module:monad.Monad\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:functor.Applicative\r\n */\r\nexport default class Monad extends Applicative {\r\n    /**\r\n     * Monadic join - Removes one layer of monadic structure from value.\r\n     * @memberOf module:monad.Monad\r\n     * @returns {*}\r\n     */\r\n    join () {\r\n        return this.valueOf();\r\n    }\r\n\r\n    /**\r\n     * Flat map operation.\r\n     * @memberOf module:monad.Monad\r\n     * @param fn {Function}\r\n     * @returns {Monad}\r\n     */\r\n    flatMap (fn) {\r\n        const out = unWrapMonadByType(this.constructor, fn(this.join()));\r\n        return this.constructor.of(out);\r\n    }\r\n\r\n    /**\r\n     * Same as `Monad.flatMap`.\r\n     * @memberOf module:monad.Monad\r\n     * @param fn {Function}\r\n     * @returns {Monad}\r\n     */\r\n    chain (fn) {\r\n        return this.flatMap(fn);\r\n    }\r\n\r\n    /**\r\n     * Same as `new Monad(...)` just in 'static' function\r\n     * format.\r\n     * @memberOf module:monad.Monad\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Monad}\r\n     */\r\n    static of (x) { return new Monad(x); }\r\n}\r\n","/**\r\n * Created by elydelacruz on 2/19/2017.\r\n * Io module - Contains `IO` class.\r\n * Fore more on io class\r\n * @see http://learnyouahaskell.com/input-and-output\r\n * @module io\r\n */\r\n\r\nimport Monad, {unWrapMonadByType} from '../monad/Monad';\r\nimport {compose, toFunction} from 'fjl';\r\n\r\n/**\r\n * @class io.IO\r\n * @param fn {Function} - Operation to contain within `IO`\r\n * @property `value` {*} - `IO` however wraps non-function values to `function` on construction.\r\n * @extends module:monad.Monad\r\n */\r\nexport default class IO extends Monad {\r\n    /**\r\n     * Unwraps an `IO`.\r\n     * @function module:io.IO.unWrapIO\r\n     * @static\r\n     * @param io {IO}\r\n     * @returns {*}\r\n     */\r\n    static unWrapIO (io) {\r\n        if (!IO.isIO(io)) { return io; }\r\n        return unWrapMonadByType(IO, io);\r\n    }\r\n\r\n    /**\r\n     * Applicative pure;  Same as `new IO(...)`.\r\n     * @function module:io.IO.of\r\n     * @static\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {IO}\r\n     */\r\n    static of(fn) {\r\n        return new IO(fn);\r\n    }\r\n\r\n    /**\r\n     * Checks for `IO`.\r\n     * @function module:io.IO.isIO\r\n     * @static\r\n     * @param x {*}.\r\n     * @returns {boolean}\r\n     */\r\n    static isIO (x) {\r\n        return x instanceof IO;\r\n    }\r\n\r\n    /**\r\n     * Performs io.\r\n     * @function module:io.IO.isIO\r\n     * @static\r\n     * @param io {IO}.\r\n     * @param args {...*} {IO}.\r\n     * @returns {boolean}\r\n     */\r\n    static do (io, ...args) {\r\n        const instance = !IO.isIO(io) ? new IO(io) : io;\r\n        return compose(\r\n            IO.of,\r\n            IO.unWrapIO\r\n        )(\r\n            toFunction(instance.join())(...args)\r\n        );\r\n    }\r\n\r\n    constructor(fn) {\r\n        super(toFunction(fn));\r\n    }\r\n\r\n    /**\r\n     * Maps incoming function onto contained, innermost, value\r\n     * and returns a new `IO` which will containe the result of calling incoming function on originally contained value - A.k.a - flat-map operation.\r\n     * @memberOf module:io.IO\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {IO}\r\n     */\r\n    flatMap (fn) {\r\n        return compose(\r\n            this.constructor.of,\r\n            IO.unWrapIO, fn,\r\n            IO.unWrapIO\r\n        )(\r\n            toFunction(this.join())()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Maps incoming function on contained value and returns\r\n     * a new `IO` container containing result of unary operation (incoming-function's result).\r\n     * @memberOf module:io.IO\r\n     * @param fn {Function}\r\n     * @returns {IO}\r\n     */\r\n    map (fn) {\r\n        return compose(\r\n            this.constructor.of,\r\n            fn\r\n        )(\r\n            toFunction(this.valueOf())()\r\n        );\r\n    }\r\n}\r\n","let NothingSingleton;\r\n\r\n/**\r\n * Constructor and function for creating/fetching `Nothing`.\r\n * @note Nothing always returns a singleton instance of `Nothing` (whether calling `Nothing` with new or as a\r\n * function.\r\n * @function module:maybe.Nothing\r\n * @param [x=undefined]{*} - Ignored.\r\n * @returns {Nothing}\r\n * @constructor\r\n * @memberOf module:maybe\r\n */\r\nfunction Nothing (x = undefined) {\r\n    if (NothingSingleton) {\r\n        return NothingSingleton;\r\n    }\r\n    else if (!(this instanceof Nothing)) {\r\n        return new Nothing();\r\n    }\r\n    NothingSingleton = this;\r\n    Object.freeze(NothingSingleton);\r\n}\r\n\r\n// Documented further below\r\nconst\r\n\r\n    /**\r\n     * Checks for `Nothing`.\r\n     * @function module:maybe.isNothing\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isNothing = x => x === NothingSingleton,\r\n\r\n    /**\r\n     * Returns `Nothing`.\r\n     * @function module:maybe.nothing\r\n     * @returns {Nothing}\r\n     */\r\n    nothing = () => new Nothing(),\r\n    returnThis = function (x) { return this; }\r\n    ;\r\n\r\n// Methods\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#valueOf\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.valueOf   = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#join\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.join      = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#map\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.map       = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#ap\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.ap        = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#flatMap\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.flatMap   = returnThis;\r\n\r\n// Set statics\r\n/**\r\n * Applicative `pure` - Same as `new Nothing()`, `Nothing()`, and `nothing()`.\r\n * @memberOf module:maybe.Nothing\r\n * @function module:maybe.Nothing.of\r\n * @static\r\n * @returns {Nothing}\r\n */\r\nNothing.of  = x => new Nothing();\r\n\r\n// Object.freeze makes properties on object immutable\r\n// @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n// Saves us from having to do the following (great!):\r\n// Object.defineProperties(Nothing, {\r\n//     of: {value: () => new Nothing(), enumerable: true},\r\n//     isNothing: {value: isNothing, enumerable: true}\r\n// });\r\nObject.freeze(Nothing);\r\n\r\nexport {isNothing, nothing};\r\n\r\nexport default Nothing;\r\n","/**\r\n * Contains `Just` constructor and associated methods.\r\n */\r\nimport Nothing, {isNothing} from './Nothing';\r\nimport Monad from '../monad/Monad';\r\nimport {isset} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Checks for `Just`.\r\n     * @function module:maybe.isJust\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isJust = x => x instanceof Just,\r\n\r\n    /**\r\n     * Functional constructor (function that returns an instance) for `Just` -\r\n     * Same as `new Just(...)` (just shorter and can be used as a function).\r\n     * @function module:maybe.just\r\n     * @param x {Just|*}\r\n     * @returns {Just}\r\n     */\r\n    just = x => new Just(x),\r\n\r\n    /**\r\n     * Ensures `Just`\r\n     * @function module:maybe.toJust\r\n     * @param x {Just|*}\r\n     * @returns {Just}\r\n     */\r\n    toJust = x => isJust(x) ? x : just(x)\r\n\r\n;\r\n\r\n/**\r\n * @class maybe.Just\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:monad.Monad\r\n */\r\nexport default class Just extends Monad {\r\n    /**\r\n     * Maps incoming function over contained value and\r\n     * returns result wrapped in `Just`.\r\n     * @method module:maybe.Just#map\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Just|Nothing}\r\n     */\r\n    map (fn) {\r\n        const {constructor} = this,\r\n            value = this.valueOf();\r\n        return isset(value) && !isNothing(value) ? constructor.of(fn(value)) :\r\n            constructor.counterConstructor.of(value);\r\n    }\r\n\r\n    /**\r\n     * Applicative pure - Same as `new Just(...)`.\r\n     * @method module:maybe.Just.of\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Just}\r\n     */\r\n    static of (x) { return just(x); }\r\n}\r\n\r\n/**\r\n * @static\r\n * @member {Functor} module:maybe.Just.counterConstructor\r\n */\r\nJust.counterConstructor = Nothing;\r\n","/**\r\n * @module maybe\r\n */\r\nimport Just, {isJust, just} from './Just';\r\nimport Nothing, {isNothing, nothing} from './Nothing';\r\nimport {isset, curry, id, trampoline} from 'fjl';\r\nimport {getMonadUnWrapper} from '../monad/Monad';\r\n\r\nexport {Just, isJust, isNothing, Nothing, just, nothing};\r\n\r\nconst\r\n    /**\r\n     * @private\r\n     */\r\n    [justUnWrapper, justUnWrapperTailCallName] = getMonadUnWrapper(Just)\r\n;\r\n\r\nexport const\r\n    /**\r\n     * The maybe function takes a `replacement` value, a function (unary operation), and a Maybe value. If the Maybe value is `Nothing`, the function returns the `replacement` value. Otherwise, it applies the function to the value contained  by the `Just` and returns the result.\r\n     * @function module:maybe.maybe\r\n     * @param replacement {*}\r\n     * @param fn {Function} - Unary operation.\r\n     * @param maybeInst {(Nothing|Just|*)} - Maybe instance or non-maybe value.\r\n     * @returns {*}\r\n     */\r\n    maybe = curry((replacement, fn, maybeInst) => {\r\n        const subject = isset(maybeInst) && isMaybe(maybeInst) ? maybeInst.map(id) : nothing();\r\n        return isNothing(subject) ? replacement : subject.map(fn).join();\r\n    }),\r\n\r\n    /**\r\n     * Unwraps just (recursively).\r\n     * @function module:maybe.unWrapJust\r\n     * @param x {*} - Expected `Just`.\r\n     * @returns {*}\r\n     */\r\n    unWrapJust = trampoline(justUnWrapper, justUnWrapperTailCallName),\r\n\r\n    /**\r\n     * Unwraps maybe (recursively).\r\n     * @function module:maybe.unWrapMaybe\r\n     * @param x {*} - Expected `Maybe`.\r\n     * @returns {*}\r\n     */\r\n    unWrapMaybe = x => isNothing(x) ? nothing() : unWrapJust(x),\r\n\r\n    /**\r\n     * Equality operator for maybes.\r\n     * @function module:maybe.maybeEqual\r\n     * @param a {*} - Maybe 1.\r\n     * @param b {*} - Maybe 2.\r\n     * @returns {boolean}\r\n     */\r\n    maybeEqual = curry((a, b) => unWrapMaybe(a) === unWrapMaybe(b)),\r\n\r\n    /**\r\n     * Checks for maybe.\r\n     * @function module:maybe.isMaybe\r\n     *  @param x {*}.\r\n     * @returns {boolean}\r\n     */\r\n    isMaybe = x => isNothing(x) || isJust(x),\r\n\r\n    /**\r\n     * Creates maybe from value.\r\n     * @function module:maybe.toMaybe\r\n     * @param x {*}\r\n     * @returns {Maybe} - `Just` or `Nothing` based on value.\r\n     */\r\n    toMaybe = x => {\r\n        if (!isset(x)) {\r\n            return nothing();\r\n        }\r\n        return isMaybe(x) ? x : just(x);\r\n    }\r\n;\r\n","/**\r\n * Contains `Either` constructs (`Right`, `Left`,  `either` etc.) and associated operations.\r\n * Created by elyde on 12/10/2016.\r\n * @module either\r\n */\r\nimport {isset, curry, id, toFunction} from 'fjl';\r\nimport {Just} from '../maybe/Maybe';\r\nimport Monad from '../monad/Monad';\r\n\r\n/**\r\n * `Left` representation of `Either` construct.\r\n * @class module:either.Left\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:monad.Monad\r\n */\r\nexport class Left extends Monad {\r\n    /**\r\n     * Same as `new Left(...)`.\r\n     * @method module:either.Left.of\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Left}\r\n     */\r\n    static of (x) { return new Left(x); }\r\n}\r\n\r\n/**\r\n * @class module:either.Right\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:maybe.Just\r\n */\r\nexport class Right extends Just {\r\n    /**\r\n     * Maps a function over contained value and returns result wrapped.\r\n     * @method module:either.Right#map\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Either}\r\n     */\r\n    map (fn) {\r\n        const value = this.valueOf();\r\n        if (isLeft(value)) {\r\n            return value;\r\n        }\r\n        else if (!isset(value)) {\r\n            return Left.of(\r\n                `TypeError: Cannot operate on \\`${value}\\`.`\r\n            );\r\n        }\r\n        return Right.of(fn(value));\r\n    }\r\n\r\n    /**\r\n     * Same as `new Right(...)`.\r\n     * @method module:either.Right.of\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Right}\r\n     */\r\n    static of (x) { return new Right(x); }\r\n}\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a new `Left`\r\n     * @function module:either.left\r\n     * @param x {*}\r\n     * @returns {Left}\r\n     */\r\n    left = x => new Left(x),\r\n\r\n    /**\r\n     * Returns a `Right`.\r\n     * @function module:either.right\r\n     * @param x {*}\r\n     * @returns {Right}\r\n     */\r\n    right = x => new Right(x),\r\n\r\n    /**\r\n     * Checks for instance of `Right` constructor.\r\n     * @function module:either.isRight\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isRight = x => x instanceof Right,\r\n\r\n    /**\r\n     * Checks for instance of `Left` constructor.\r\n     * @function module:either.isLeft\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isLeft = x => x instanceof Left,\r\n\r\n    /**\r\n     * Returns a `Right` - if not a `Right` creates one from given, else returns given.\r\n     * @function module:either.toRight\r\n     * @param x {*}\r\n     * @returns {Right}\r\n     */\r\n    toRight = x => isRight(x) ? x : right(x),\r\n\r\n    /**\r\n     * Returns a `Left` - if not a `Left` creates one from given, else returns given.\r\n     * @function module:either.toLeft\r\n     * @param x {*}\r\n     * @returns {Left}\r\n     */\r\n    toLeft = x => isLeft(x) ? x : left(x),\r\n\r\n    /**\r\n     * Converts given to an either (`Right`|`Left`)\r\n     * @function module:either.toEither\r\n     * @param x {*}\r\n     * @returns {Left|Right}\r\n     */\r\n    toEither = x => isLeft(x) || isRight(x) ? x : right(x).map(id),\r\n\r\n    /**\r\n     * Calls matching callback on incoming `Either`'s type;  If is a `Left`\r\n     * (after mapping identity func on it) then calls left-callback and unwraps result\r\n     * else calls right-callback and does the same.  Think of it like a functional\r\n     * ternary statement (lol).\r\n     * @function module:either.either\r\n     * @param leftCallback {Function} - Mapped over value of `monad`'s identity.\r\n     * @param rightCallback {Function} - \"\".\r\n     * @param _either_ {Either|*}\r\n     * @return {*} - Value of unwrapped resulting value of `flatMap`ped, passed-in callback's on passed in monad.\r\n     * @example\r\n     * expect(\r\n         either(() => 404, () => 200, compose(right, right, right, right)(true))\r\n       ).toEqual(undefined);\r\n     */\r\n    either = curry((leftCallback, rightCallback, _either_) => {\r\n        const identity = toEither(_either_).flatMap(id),\r\n            out = isRight(_either_) ?\r\n                identity.flatMap(toFunction(rightCallback)) :\r\n                identity.flatMap(leftCallback)\r\n            ;\r\n        return isset(out) ? out.join() : out;\r\n    })\r\n\r\n;\r\n","/**\r\n * Makes all module members in library accessible via itself (is also the main export of the library).\r\n * Created by elydelacruz on 2/19/2017.\r\n * @module fjlDataCore\r\n */\r\nimport Functor from './functor/Functor';\r\nimport Apply from './functor/Apply';\r\nimport Applicative from './functor/Applicative';\r\nimport Bifunctor from './functor/Bifunctor';\r\nimport Monad, {isMonad, valueOf, join, fmap,\r\n    ap, flatMap, getMonadUnWrapper} from './monad/Monad';\r\nimport IO from './io/IO';\r\n\r\nexport {\r\n    Functor, Apply, Applicative, Bifunctor, IO, Monad,\r\n    isMonad, valueOf, join, fmap, ap, flatMap, getMonadUnWrapper\r\n};\r\n\r\nexport * from './maybe/Maybe';\r\nexport * from './either/Either';\r\n\r\n/* ==================================== */\r\n/* Virtual types */\r\n/* ==================================== */\r\n/**\r\n * @typedef {Function} UnaryOperation\r\n */\r\n\r\n/**\r\n * @typedef {Just|Nothing} Maybe\r\n */\r\n\r\n/**\r\n * @typedef {Left|Right} Either\r\n */\r\n"],"names":["Functor","value","fn","constructor","valueOf","map","Apply","x","toFunction","Applicative","appA","appB","of","Bifunctor","value1","value2","value2Of","fn1","fn2","isMonad","Monad","join","fmap","curry","ap","applicative","functor","flatMap","monad","getMonadUnWrapper","Type","unWrapMonadByType","instanceOf","trampolineCall","isset","unWrapper","tailCallName","unwrap","trampoline","out","IO","io","isIO","instance","args","compose","unWrapIO","NothingSingleton","Nothing","Object","freeze","isNothing","nothing","returnThis","prototype","isJust","Just","just","counterConstructor","justUnWrapper","justUnWrapperTailCallName","maybe","replacement","maybeInst","subject","isMaybe","id","unWrapJust","unWrapMaybe","maybeEqual","a","b","toMaybe","Left","Right","isLeft","left","right","isRight","toRight","toLeft","toEither","either","leftCallback","rightCallback","_either_","identity"],"mappings":"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"}