{"version":3,"file":"fjl-data-core.js","sources":["../../src/functor/Functor.js","../../src/functor/Apply.js","../../src/functor/Applicative.js","../../src/functor/Bifunctor.js","../../src/monad/Monad.js","../../src/io/IO.js","../../src/maybe/Nothing.js","../../src/maybe/Just.js","../../src/maybe/Maybe.js","../../src/either/Either.js","../../src/fjlDataCore.js"],"sourcesContent":["/**\r\n * Functor class and associated operations.\r\n * Created by edlc on 12/9/16.\r\n * @module functor\r\n */\r\n\r\n\r\n/**\r\n * Always returns a functor;  If given value is not\r\n * a functor creates one and passes given value to it.\r\n * @function module:functor.alwaysFunctor\r\n * @param x {{map: Function}|any} - Functor or any.\r\n * @returns {any}\r\n */\r\nexport const alwaysFunctor = x => !x.map ? new Functor(x) : x;\r\n\r\n/**\r\n * Plain old functor class.\r\n * @class module:functor.Functor\r\n * @param value {any}\r\n * @property value {any}\r\n */\r\nexport default class Functor {\r\n\r\n    /**\r\n     * @memberOf module:functor.Functor\r\n     * @param value {any}\r\n     */\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * Extracts value of functor (same as monadic `join`).\r\n     * @memberOf module:functor.Functor\r\n     * @returns {any}\r\n     */\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * Maps a function over contents of functor.\r\n     * @memberOf module:functor.Functor\r\n     * @param fn {Function} - Function that takes one `any` and returns one `any`.\r\n     * @returns {Functor}\r\n     */\r\n    map(fn) {\r\n        return new this.constructor(fn(this.valueOf()));\r\n    }\r\n\r\n    /**\r\n     * Same as `#Functor.map`.\r\n     * @memberOf module:functor.Functor\r\n     * @param fn {Function}\r\n     * @returns {Functor}\r\n     */\r\n    fmap (fn) {\r\n        return this.map(fn);\r\n    }\r\n}\r\n","/**\r\n * Contains `Applicative`'s `Apply` class (class that contains `ap` (a.k.a. `pure`) method).\r\n * Created by edlc on 12/9/16.\r\n * @memberOf module:functor\r\n */\r\n\r\nimport {toFunction} from 'fjl';\r\nimport Functor from './Functor';\r\n\r\n/**\r\n * Apply construct.\r\n * @class module:functor.Apply\r\n * @param fn {Function|*}\r\n * @property value {any}\r\n * @extends module:functor.Functor\r\n */\r\nexport default class Apply extends Functor {\r\n    /**\r\n     * Applicative apply operation - applies contained function over passed in functor.\r\n     * @memberOf module:functor.Apply\r\n     * @param x {Functor}\r\n     * @returns {Apply}\r\n     */\r\n    ap (x) {\r\n        return x.map(toFunction(this.valueOf()));\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * Applicative class module.\r\n * @memberOf module:functor\r\n */\r\nimport Apply from './Apply';\r\n\r\n/**\r\n * @class module:functor.Applicative\r\n * @extends module:functor.Apply\r\n */\r\nexport default class Applicative extends Apply {\r\n    /**\r\n     * Constructs an applicative with given `value`.\r\n     * @function module:functor.Applicative.of\r\n     * @static\r\n     * @param value {any}\r\n     * @returns {Applicative}\r\n     */\r\n    static of (value) {\r\n        return new Applicative(value);\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * @memberOf module:functor\r\n */\r\nimport Functor from './Functor';\r\n\r\nexport default class Bifunctor extends Functor {\r\n    constructor(value1, value2) {\r\n        super(value1);\r\n        this.value2 = value2;\r\n    }\r\n\r\n    value2Of() {\r\n        return this.value2;\r\n    }\r\n\r\n    first (fn) {\r\n        return new this.constructor(fn(this.valueOf()), this.value2Of());\r\n    }\r\n\r\n    second (fn) {\r\n        return new this.constructor(this.valueOf(), fn(this.value2Of()));\r\n    }\r\n\r\n    bimap (fn1, fn2) {\r\n        return new this.constructor(\r\n            fn1(this.valueOf()),\r\n            fn2(this.value2Of())\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * Contains basic `Monad` class and associated methods.\r\n * For 'what is a monad'/back-story\r\n * @see `Maybe` reference: [http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Maybe.html](http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Maybe.html)\r\n * @see `Either` reference: [http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Either.html](http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Either.html)\r\n * @module monad\r\n */\r\n\r\nimport {isset, curry, instanceOf, trampoline} from 'fjl';\r\nimport Applicative from '../functor/Applicative';\r\nimport Functor from '../functor/Functor';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns boolean indicating whether given value is an\r\n     * instance of monad or not.\r\n     * @function module:monad.isMonad\r\n     * @param value {any}\r\n     * @returns {boolean}\r\n     */\r\n    isMonad = value => value && value instanceof Monad,\r\n\r\n    /**\r\n     * Always returns a monad;  If given value is not\r\n     * a monad creates using given value.\r\n     * @function module:functor.alwaysMonad\r\n     * @param x {Monad|any} - Monad or any.\r\n     * @returns {any}\r\n     */\r\n    alwaysMonad = x => !x.map ? new Monad(x) : x,\r\n\r\n    /**\r\n     * Calls `valueOf` on value (use for functional composition).\r\n     * @function module.fjlDataCore.valueOf\r\n     * @param x {any}\r\n     * @returns {any}\r\n     */\r\n    valueOf = x => x.valueOf(),\r\n\r\n    /**\r\n     * Calls `valueOf` on given value.  Same as\r\n     * monadic `join` operation (extracts inner value of\r\n     * container/object).\r\n     * @function module.fjlDataCore.join\r\n     * @param x {any}\r\n     * @returns {any}\r\n     */\r\n    join = valueOf,\r\n\r\n    /**\r\n     * Maps given function over given functor.\r\n     * @function module.fjlDataCore.fmap\r\n     * @param fn {Function}\r\n     * @param x {Functor}\r\n     * @returns {Functor}\r\n     */\r\n    fmap = curry((fn, x) => x.map(fn)),\r\n\r\n    /**\r\n     * Applies function contained by applicative to contents of given functor.\r\n     * (Same as functional applicative `apply`).\r\n     * @function module.fjlDataCore.ap\r\n     * @param applicative {Applicative}\r\n     * @param functor {Functor}\r\n     * @returns {Applicative}\r\n     */\r\n    ap = curry((applicative, functor) => applicative.ap(functor)),\r\n\r\n    /**\r\n     * Flat maps a function over given monad's contained value.\r\n     * @function module.fjlDataCore.flatMap\r\n     * @param fn {Function}\r\n     * @param monad {Monad}\r\n     * @returns {Monad}\r\n     */\r\n    flatMap = curry((fn, monad) => monad.flatMap(fn)),\r\n\r\n    /**\r\n     * A recursive monad un-wrapper (doesn't work on promises (for promises use `async` `await` (to unwrap))).  Unwraps monad to most inner contents (final inner value).\r\n     * @function module:monad.getMonadUnWrapper\r\n     * @param Type {Function}\r\n     * @returns {Array.<any>} - [unWrapFunction, tailCallFuncName (used by `trampoline` @see module:fjl.trampoline)]\r\n     */\r\n    getMonadUnWrapper = Type => {\r\n        return [ function unWrapMonadByType(monad) {\r\n                return instanceOf(Type, monad) ?\r\n                    function trampolineCall() {\r\n                        return unWrapMonadByType(monad.valueOf());\r\n                    } :\r\n                    monad;\r\n            }, 'trampolineCall' ];\r\n    };\r\n\r\n/**\r\n * @class module:monad.Monad\r\n * @param x {any}\r\n * @property value {any}\r\n */\r\nexport default class Monad extends Applicative {\r\n    static unWrapMonadByType (Type, monad) {\r\n        if (!isset(monad)) { return monad; }\r\n        const [unWrapper, tailCallName] = getMonadUnWrapper(Type),\r\n            unwrap = trampoline(unWrapper, tailCallName);\r\n        return unwrap(monad);\r\n    }\r\n\r\n    /**\r\n     * Monadic join - Removes one layer of monadic structure from value.\r\n     * @memberOf module:monad.Monad\r\n     * @returns {any}\r\n     */\r\n    join () {\r\n        return this.valueOf();\r\n    }\r\n\r\n    /**\r\n     * Flat map operation.\r\n     * @memberOf module:monad.Monad\r\n     * @param fn {Function}\r\n     * @returns {Monad}\r\n     */\r\n    flatMap (fn) {\r\n        const out = Monad.unWrapMonadByType(this.constructor, fn(this.join()));\r\n        return this.constructor.of(out);\r\n    }\r\n\r\n    /**\r\n     * Same as `Monad.flatMap`.\r\n     * @memberOf module:monad.Monad\r\n     * @param fn {Function}\r\n     * @returns {Monad}\r\n     */\r\n    chain (fn) {\r\n        return this.flatMap(fn);\r\n    }\r\n\r\n    /**\r\n     * Same as `new Monad(...)` just in 'static' function\r\n     * format.\r\n     * @memberOf module:monad.Monad\r\n     * @static\r\n     * @param x {any}\r\n     * @returns {Monad}\r\n     */\r\n    static of (x) { return new Monad(x); }\r\n\r\n    /**\r\n     * Checks for monad.\r\n     * @memberOf module:monad.Monad\r\n     * @static\r\n     * @param x {any}\r\n     * @returns {boolean}\r\n     */\r\n    static isMonad (x) { return isMonad(x); }\r\n}\r\n","/**\r\n * Created by elydelacruz on 2/19/2017.\r\n */\r\n\r\nimport Monad from '../monad/Monad';\r\nimport {compose, toFunction} from 'fjl';\r\n\r\nexport default class IO extends Monad {\r\n    static unWrapIO (io) {\r\n        if (!IO.isIO(io)) { return io; }\r\n        return Monad.unWrapMonadByType(IO, io);\r\n    }\r\n    static of(fn) {\r\n        return new IO(fn);\r\n    }\r\n    static isIO (x) {\r\n        return x instanceof IO;\r\n    }\r\n    static do (io, ...args) {\r\n        const instance = !IO.isIO(io) ? new IO(io) : io;\r\n        return compose(\r\n            IO.of,\r\n            IO.unWrapIO\r\n        )(\r\n            toFunction(instance.join())(...args)\r\n        );\r\n    }\r\n\r\n    constructor(fn) {\r\n        super(toFunction(fn));\r\n    }\r\n\r\n    flatMap (fn) {\r\n        return compose(\r\n            this.constructor.of,\r\n            IO.unWrapIO, fn,\r\n            IO.unWrapIO\r\n        )(\r\n            toFunction(this.join())()\r\n        );\r\n    }\r\n\r\n    map (fn) {\r\n        return compose(\r\n            this.constructor.of,\r\n            fn\r\n        )(\r\n            toFunction(this.valueOf())()\r\n        );\r\n    }\r\n}\r\n","let NothingSingleton;\r\n\r\nfunction Nothing () {\r\n    if (NothingSingleton) {\r\n        return NothingSingleton;\r\n    }\r\n    else if (!(this instanceof Nothing)) {\r\n        return new Nothing();\r\n    }\r\n    NothingSingleton = this;\r\n    Object.freeze(NothingSingleton);\r\n}\r\n\r\nconst isNothing = x => x === NothingSingleton,\r\n\r\n    nothing = () => new Nothing(),\r\n\r\n    // Prototypical stuff\r\n    returnThis = function () { return this; },\r\n    {prototype} = Nothing;\r\n\r\n// Methods\r\nprototype.valueOf   = returnThis;\r\nprototype.join      = returnThis;\r\nprototype.map       = returnThis;\r\nprototype.ap        = returnThis;\r\nprototype.flatMap   = returnThis;\r\n\r\n// Set statics\r\nNothing.of  = () => new Nothing();\r\nNothing.isNothing = isNothing;\r\nNothing.nothing = nothing;\r\n\r\n// Object.freeze makes properties on object immutable\r\n// @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n// Saves us from having to do the following (great!):\r\n// Object.defineProperties(Nothing, {\r\n//     of: {value: () => new Nothing(), enumerable: true},\r\n//     isNothing: {value: isNothing, enumerable: true}\r\n// });\r\nObject.freeze(Nothing);\r\n\r\nexport {isNothing, nothing};\r\n\r\nexport default Nothing;\r\n","import Nothing, {isNothing} from './Nothing';\r\nimport Monad from '../monad/Monad';\r\nimport {isset} from 'fjl';\r\n\r\nexport const\r\n    isJust = x => x instanceof Just,\r\n    just = x => new Just(x)\r\n;\r\n\r\nexport default class Just extends Monad {\r\n    map (fn) {\r\n        const {constructor} = this,\r\n            value = this.valueOf();\r\n        return isset(value) && !isNothing(value) ? constructor.of(fn(value)) :\r\n            constructor.counterConstructor.of(value);\r\n    }\r\n    static of (x) { return just(x); }\r\n    static isJust (x) { return isJust(x); }\r\n}\r\n\r\nJust.counterConstructor = Nothing;\r\n","import Just, {isJust, just} from './Just';\r\nimport Nothing, {isNothing, nothing} from './Nothing';\r\nimport {isset, curry, id, trampoline} from 'fjl';\r\nimport {getMonadUnWrapper} from '../monad/Monad';\r\n\r\nexport {Just, isJust, isNothing, Nothing, just, nothing};\r\n\r\nconst\r\n    /**\r\n     * @private\r\n     */\r\n    [justUnWrapper, justUnWrapperTailCallName] = getMonadUnWrapper(Just)\r\n;\r\n\r\nexport const\r\n    /**\r\n     * @param replacement {*}\r\n     * @param fn {Function} - Some operation.\r\n     * @param maybeInst {(Nothing|Just|*)} - Maybe instance or non\r\n     */\r\n    maybe = curry((replacement, fn, maybeInst) => {\r\n        const subject = isset(maybeInst) && isMaybe(maybeInst) ? maybeInst.map(id) : Nothing.of();\r\n        return isNothing(subject) ? replacement : subject.map(fn).join();\r\n    }),\r\n\r\n    unWrapJust = trampoline(justUnWrapper, justUnWrapperTailCallName),\r\n\r\n    unWrapMaybe = x => isNothing(x) ? nothing() : unWrapJust(x),\r\n\r\n    maybeEqual = curry((a, b) => unWrapMaybe(a) === unWrapMaybe(b)),\r\n\r\n    isMaybe = x => isNothing(x) || isJust(x),\r\n\r\n    toMaybe = x => isset(x) ? just(x) : nothing()\r\n\r\n;\r\n","/**\r\n * Contains `Either` constructs (`Right`, `Left`,  `either` etc.) and associated operations.\r\n * Created by elyde on 12/10/2016.\r\n * @module either\r\n */\r\nimport {isset, curry, id, toFunction} from 'fjl';\r\nimport {Just} from '../maybe/Maybe';\r\nimport Monad, {alwaysMonad} from '../monad/Monad';\r\n\r\n/**\r\n * `Left` representation of `Either` construct.\r\n * @class Left\r\n * @param x {any}\r\n * @property value {any}\r\n */\r\nexport class Left extends Monad {\r\n    static of (x) { return new Left(x); }\r\n}\r\n\r\n/**\r\n * @class Right\r\n * @param x {any}\r\n * @property value {any}\r\n */\r\nexport class Right extends Just {\r\n    map (fn) {\r\n        const value = this.valueOf();\r\n        if (isLeft(value)) {\r\n            return value;\r\n        }\r\n        else if (!isset(value)) {\r\n            return Left.of(\r\n                `TypeError: Cannot operate on \\`${value}\\`.`\r\n            );\r\n        }\r\n        return Right.of(fn(value));\r\n    }\r\n\r\n    static of (x) { return new Right(x); }\r\n}\r\n\r\nexport const\r\n    /**\r\n     * Checks for instance of `Right` constructor.\r\n     * @function module:either.isRight\r\n     * @param x {any}\r\n     * @returns {boolean}\r\n     */\r\n    isRight = x => x instanceof Right,\r\n\r\n    /**\r\n     * Checks for instance of `Left` constructor.\r\n     * @function module:either.isLeft\r\n     * @param x {any}\r\n     * @returns {boolean}\r\n     */\r\n    isLeft = x => x instanceof Left,\r\n\r\n    /**\r\n     * Calls matching callback on incoming `Either`'s type;  If is a `Left` (after mapping identity func on it) then calls left-callback and unwraps result\r\n     * else calls right-callback and does the same.  Think of it like a functional\r\n     * ternary statement (lol).\r\n     * @function module:either.either\r\n     * @param leftCallback {Function} - Mapped over value of `monad`'s identity.\r\n     * @param rightCallback {Function} - \"\".\r\n     * @return {any} - Value of unwrapped resulting value of `flatMap`ped, passed-in callback's on passed in monad.\r\n     * @example\r\n     * expect(\r\n         either(() => 404, () => 200, compose(right, right, right, right)(true))\r\n       ).toEqual(undefined);\r\n     */\r\n    either = curry((leftCallback, rightCallback, monad) => {\r\n        const identity = alwaysMonad(monad).flatMap(id),\r\n            out = isRight(monad) ?\r\n                identity.flatMap(toFunction(rightCallback)) :\r\n                Left.of(identity).flatMap(leftCallback)\r\n            ;\r\n        return isset(out) ? out.join() : out;\r\n    }),\r\n\r\n    toRight = x => isRight(x) ? x : new Right(x),\r\n\r\n    toLeft = x => isLeft(x) ? x : new Left(x)\r\n\r\n;\r\n","/**\r\n * Makes all module members in library accessible via itself (is also the main export of the library).\r\n * Created by elydelacruz on 2/19/2017.\r\n * @module fjlDataCore\r\n */\r\nimport Functor from './functor/Functor';\r\nimport Apply from './functor/Apply';\r\nimport Applicative from './functor/Applicative';\r\nimport Bifunctor from './functor/Bifunctor';\r\nimport Monad, {isMonad, valueOf, join, fmap,\r\n    ap, flatMap, getMonadUnWrapper} from './monad/Monad';\r\nimport IO from './io/IO';\r\n\r\nexport {\r\n    Functor, Apply, Applicative, Bifunctor, IO, Monad,\r\n    isMonad, valueOf, join, fmap, ap, flatMap, getMonadUnWrapper\r\n};\r\n\r\nexport * from './maybe/Maybe';\r\nexport * from './either/Either';\r\n\r\n/* ==================================== */\r\n/* Virtual types */\r\n/* ==================================== */\r\n/**\r\n * @typedef {Function} UnaryOperation\r\n */\r\n"],"names":["Functor","value","fn","constructor","valueOf","map","Apply","x","toFunction","Applicative","Bifunctor","value1","value2","value2Of","fn1","fn2","isMonad","Monad","alwaysMonad","join","fmap","curry","ap","applicative","functor","flatMap","monad","getMonadUnWrapper","Type","unWrapMonadByType","instanceOf","trampolineCall","out","of","isset","unWrapper","tailCallName","unwrap","trampoline","IO","io","isIO","instance","args","compose","unWrapIO","NothingSingleton","Nothing","Object","freeze","isNothing","nothing","returnThis","prototype","isJust","Just","just","counterConstructor","justUnWrapper","justUnWrapperTailCallName","maybe","replacement","maybeInst","subject","isMaybe","id","unWrapJust","unWrapMaybe","maybeEqual","a","b","toMaybe","Left","Right","isLeft","isRight","either","leftCallback","rightCallback","identity","toRight","toLeft"],"mappings":"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"}