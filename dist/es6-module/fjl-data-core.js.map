{"version":3,"file":"fjl-data-core.js","sources":["../../src/functor/Functor.js","../../src/functor/Apply.js","../../src/functor/Applicative.js","../../src/functor/Bifunctor.js","../../src/monad/Monad.js","../../src/io/IO.js","../../src/maybe/Nothing.js","../../src/maybe/Just.js","../../src/maybe/Maybe.js","../../src/either/Either.js","../../src/fjlDataCore.js"],"sourcesContent":["/**\r\n * Functor class and associated operations.\r\n * Created by edlc on 12/9/16.\r\n * @module functor\r\n */\r\n\r\n/**\r\n * Always returns a functor;  If given value is not\r\n * a functor creates one from given value to it.\r\n * @function module:functor.toFunctor\r\n * @param x {{map: Function}|*} - Functor or any.\r\n * @returns {*}\r\n */\r\nexport const toFunctor = x => !x.map ? new Functor(x) : x;\r\n\r\n/**\r\n * Plain old functor class.\r\n * @class module:functor.Functor\r\n * @param value {*}\r\n * @property value {*}\r\n */\r\nexport default class Functor {\r\n\r\n    /**\r\n     * @constructor\r\n     * @param value {*}\r\n     */\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * Extracts value of functor (same as monadic `join`).\r\n     * @method module:functor.Functor#valueOf\r\n     * @returns {*}\r\n     */\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * Maps a function over contents of functor.\r\n     * @method module:functor.Functor#map\r\n     * @param fn {Function} - Function that takes one `any` and returns one `any`.\r\n     * @returns {Functor}\r\n     */\r\n    map(fn) {\r\n        return new this.constructor(fn(this.valueOf()));\r\n    }\r\n\r\n    /**\r\n     * Same as `#Functor.map`.\r\n     * @method module:functor.Functor#fmap\r\n     * @param fn {Function}\r\n     * @returns {Functor}\r\n     */\r\n    fmap (fn) {\r\n        return this.map(fn);\r\n    }\r\n}\r\n","/**\r\n * Contains `Applicative`'s `Apply` class (class that contains `ap` (a.k.a. `pure`) method).\r\n * Created by edlc on 12/9/16.\r\n * @memberOf module:functor\r\n */\r\n\r\nimport {toFunction} from 'fjl';\r\nimport Functor from './Functor';\r\n\r\n/**\r\n * Apply construct.\r\n * @class module:functor.Apply\r\n * @param fn {Function|*}\r\n * @property value {*}\r\n * @extends module:functor.Functor\r\n */\r\nexport default class Apply extends Functor {\r\n    /**\r\n     * Applicative apply operation - applies contained function over passed in functor.\r\n     * @memberOf module:functor.Apply\r\n     * @param x {Functor}\r\n     * @returns {Apply}\r\n     */\r\n    ap (x) {\r\n        return x.map(toFunction(this.valueOf()));\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * Applicative class module.\r\n * @memberOf module:functor\r\n */\r\nimport Apply from './Apply';\r\n\r\n/**\r\n * @class module:functor.Applicative\r\n * @extends module:functor.Apply\r\n */\r\nexport default class Applicative extends Apply {\r\n    /**\r\n     * Constructs an applicative with given `value`.\r\n     * @function module:functor.Applicative.of\r\n     * @static\r\n     * @param value {*}\r\n     * @returns {Applicative}\r\n     */\r\n    static of (value) {\r\n        return new Applicative(value);\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * @memberOf module:functor\r\n */\r\nimport Functor from './Functor';\r\n\r\n/**\r\n * Bifunctor class;  Mostly useful for eithers and/or maybes.\r\n * @class module:functor.Bifunctor\r\n * @param value1 {*}\r\n * @param value2 {*}\r\n * @property value {*}\r\n * @property value2 {*}\r\n */\r\nexport default class Bifunctor extends Functor {\r\n\r\n    /**\r\n     * @param value1 {*}\r\n     * @param value2 {*}\r\n     * @private\r\n     * @returns {Bifunctor}\r\n     */\r\n    constructor(value1, value2) {\r\n        super(value1);\r\n        this.value2 = value2;\r\n    }\r\n\r\n    /**\r\n     * Returns wrapped 'second' value.\r\n     * @method module:functor.Bifunctor#value2Of\r\n     * @returns {*}\r\n     */\r\n    value2Of() {\r\n        return this.value2;\r\n    }\r\n\r\n    /**\r\n     * Allows you to map over first 'contained' value.\r\n     * @method module:functor.Bifunctor#first\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Bifunctor}\r\n     */\r\n    first (fn) {\r\n        return new this.constructor(fn(this.valueOf()), this.value2Of());\r\n    }\r\n\r\n    /**\r\n     * Allows you to map over second 'contained' value.\r\n     * @method module:functor.Bifunctor#second\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Bifunctor}\r\n     */\r\n    second (fn) {\r\n        return new this.constructor(this.valueOf(), fn(this.value2Of()));\r\n    }\r\n\r\n    /**\r\n     * Allows you to map 2 functions over contained values - One function over each value.\r\n     * @method module:functor.Bifunctor#bimap\r\n     * @param fn1 {Function} - Unary op.\r\n     * @param fn2 {Function} - Unary op.\r\n     * @returns {Bifunctor}\r\n     */\r\n    bimap (fn1, fn2) {\r\n        return new this.constructor(\r\n            fn1(this.valueOf()),\r\n            fn2(this.value2Of())\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * Contains basic `Monad` class and associated methods.\r\n * For 'what is a monad'/back-story\r\n * @see `Maybe` reference: [http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Maybe.html](http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Maybe.html)\r\n * @see `Either` reference: [http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Either.html](http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Either.html)\r\n * @module monad\r\n */\r\n\r\nimport {isset, curry, instanceOf, trampoline} from 'fjl';\r\nimport Applicative from '../functor/Applicative';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns boolean indicating whether given value is an\r\n     * instance of monad or not.\r\n     * @function module:monad.isMonad\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    isMonad = value => value && value instanceof Monad,\r\n\r\n    /**\r\n     * Always returns a monad;  If given value is not\r\n     * a monad creates one using given value.\r\n     * @function module:monad.toMonad\r\n     * @param x {Monad|*} - Monad or any.\r\n     * @returns {*}\r\n     */\r\n    toMonad = x => !x.map ? new Monad(x) : x,\r\n\r\n    /**\r\n     * Calls `valueOf` on value (use for functional composition).\r\n     * @function module:monad.valueOf\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    valueOf = x => x.valueOf(),\r\n\r\n    /**\r\n     * Calls `valueOf` on given value.  Same as\r\n     * monadic `join` operation (extracts inner value of\r\n     * container/object).\r\n     * @function module:monad.join\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    join = valueOf,\r\n\r\n    /**\r\n     * Maps given function over given functor.\r\n     * @function module:monad.fmap\r\n     * @param fn {Function}\r\n     * @param x {Functor}\r\n     * @returns {Functor}\r\n     */\r\n    fmap = curry((fn, x) => x.map(fn)),\r\n\r\n    /**\r\n     * Applies function contained by applicative to contents of given functor.\r\n     * (Same as functional applicative `apply`).\r\n     * @function module:monad.ap\r\n     * @param applicative {Applicative}\r\n     * @param functor {Functor}\r\n     * @returns {Applicative}\r\n     */\r\n    ap = curry((applicative, functor) => applicative.ap(functor)),\r\n\r\n    /**\r\n     * Flat maps a function over given monad's contained value.\r\n     * @function module:monad.flatMap\r\n     * @param fn {Function}\r\n     * @param monad {Monad}\r\n     * @returns {Monad}\r\n     */\r\n    flatMap = curry((fn, monad) => monad.flatMap(fn)),\r\n\r\n    /**\r\n     * A recursive monad un-wrapper - Returns monad's unwrapped, inner-mostly, contained value (recursively).\r\n     * @function module:monad.getMonadUnWrapper\r\n     * @param Type {Function}\r\n     * @returns {Array.<*>} - [unWrapFunction, tailCallFuncName (used by `trampoline` @see module:fjl.trampoline)]\r\n     */\r\n    getMonadUnWrapper = Type => {\r\n        return [ function unWrapMonadByType(monad) {\r\n                return instanceOf(Type, monad) ?\r\n                    function trampolineCall() {\r\n                        return unWrapMonadByType(monad.valueOf());\r\n                    } :\r\n                    monad;\r\n            }, 'trampolineCall' ];\r\n    },\r\n\r\n    /**\r\n     * Unwraps monad by type.\r\n     * @function module:monad.unWrapMonadByType\r\n     * @param Type {Function}\r\n     * @param monad {Monad}\r\n     * @returns {*}\r\n     */\r\n    unWrapMonadByType = (Type, monad) => {\r\n        if (!isset(monad)) {\r\n            return monad;\r\n        }\r\n        const [unWrapper, tailCallName] = getMonadUnWrapper(Type),\r\n            unwrap = trampoline(unWrapper, tailCallName);\r\n        return unwrap(monad);\r\n    };\r\n\r\n/**\r\n * @class module:monad.Monad\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:functor.Applicative\r\n */\r\nexport default class Monad extends Applicative {\r\n    /**\r\n     * Monadic join - Removes one layer of monadic structure from value.\r\n     * @memberOf module:monad.Monad\r\n     * @returns {*}\r\n     */\r\n    join () {\r\n        return this.valueOf();\r\n    }\r\n\r\n    /**\r\n     * Flat map operation.\r\n     * @memberOf module:monad.Monad\r\n     * @param fn {Function}\r\n     * @returns {Monad}\r\n     */\r\n    flatMap (fn) {\r\n        const out = unWrapMonadByType(this.constructor, fn(this.join()));\r\n        return this.constructor.of(out);\r\n    }\r\n\r\n    /**\r\n     * Same as `Monad.flatMap`.\r\n     * @memberOf module:monad.Monad\r\n     * @param fn {Function}\r\n     * @returns {Monad}\r\n     */\r\n    chain (fn) {\r\n        return this.flatMap(fn);\r\n    }\r\n\r\n    /**\r\n     * Same as `new Monad(...)` just in 'static' function\r\n     * format.\r\n     * @memberOf module:monad.Monad\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Monad}\r\n     */\r\n    static of (x) { return new Monad(x); }\r\n}\r\n","/**\r\n * Created by elydelacruz on 2/19/2017.\r\n * Io module - Contains `IO` class.\r\n * Fore more on io class\r\n * @see http://learnyouahaskell.com/input-and-output\r\n * @module io\r\n */\r\n\r\nimport Monad, {unWrapMonadByType} from '../monad/Monad';\r\nimport {compose, toFunction} from 'fjl';\r\n\r\n/**\r\n * @class io.IO\r\n * @param fn {Function} - Operation to contain within `IO`\r\n * @property `value` {*} - `IO` however wraps non-function values to `function` on construction.\r\n */\r\nexport default class IO extends Monad {\r\n    /**\r\n     * Unwraps an `IO`.\r\n     * @function module:io.IO.unWrapIO\r\n     * @static\r\n     * @param io {IO}\r\n     * @returns {*}\r\n     */\r\n    static unWrapIO (io) {\r\n        if (!IO.isIO(io)) { return io; }\r\n        return unWrapMonadByType(IO, io);\r\n    }\r\n\r\n    /**\r\n     * Applicative pure;  Same as `new IO(...)`.\r\n     * @function module:io.IO.of\r\n     * @static\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {IO}\r\n     */\r\n    static of(fn) {\r\n        return new IO(fn);\r\n    }\r\n\r\n    /**\r\n     * Checks for `IO`.\r\n     * @function module:io.IO.isIO\r\n     * @static\r\n     * @param x {*}.\r\n     * @returns {boolean}\r\n     */\r\n    static isIO (x) {\r\n        return x instanceof IO;\r\n    }\r\n\r\n    /**\r\n     * Performs io.\r\n     * @function module:io.IO.isIO\r\n     * @static\r\n     * @param io {IO}.\r\n     * @param args {...*} {IO}.\r\n     * @returns {boolean}\r\n     */\r\n    static do (io, ...args) {\r\n        const instance = !IO.isIO(io) ? new IO(io) : io;\r\n        return compose(\r\n            IO.of,\r\n            IO.unWrapIO\r\n        )(\r\n            toFunction(instance.join())(...args)\r\n        );\r\n    }\r\n\r\n    constructor(fn) {\r\n        super(toFunction(fn));\r\n    }\r\n\r\n    /**\r\n     * Maps incoming function onto contained, innermost, value\r\n     * and returns a new `IO` which will containe the result of calling incoming function on originally contained value - A.k.a - flat-map operation.\r\n     * @memberOf module:io.IO\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {IO}\r\n     */\r\n    flatMap (fn) {\r\n        return compose(\r\n            this.constructor.of,\r\n            IO.unWrapIO, fn,\r\n            IO.unWrapIO\r\n        )(\r\n            toFunction(this.join())()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Maps incoming function on contained value and returns\r\n     * a new `IO` container containing result of unary operation (incoming-function's result).\r\n     * @memberOf module:io.IO\r\n     * @param fn {Function}\r\n     * @returns {IO}\r\n     */\r\n    map (fn) {\r\n        return compose(\r\n            this.constructor.of,\r\n            fn\r\n        )(\r\n            toFunction(this.valueOf())()\r\n        );\r\n    }\r\n}\r\n","let NothingSingleton;\r\n\r\n/**\r\n * Constructor and function for creating/fetching `Nothing`.\r\n * @note Nothing always returns a singleton instance of `Nothing` (whether calling `Nothing` with new or as a\r\n * function.\r\n * @function module:maybe.Nothing\r\n * @param [x=undefined]{*} - Ignored.\r\n * @returns {Nothing}\r\n * @constructor\r\n * @memberOf module:maybe\r\n */\r\nfunction Nothing (x = undefined) {\r\n    if (NothingSingleton) {\r\n        return NothingSingleton;\r\n    }\r\n    else if (!(this instanceof Nothing)) {\r\n        return new Nothing();\r\n    }\r\n    NothingSingleton = this;\r\n    Object.freeze(NothingSingleton);\r\n}\r\n\r\n// Documented further below\r\nconst\r\n\r\n    /**\r\n     * Checks for `Nothing`.\r\n     * @function module:maybe.isNothing\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isNothing = x => x === NothingSingleton,\r\n\r\n    /**\r\n     * Returns `Nothing`.\r\n     * @function module:maybe.nothing\r\n     * @returns {Nothing}\r\n     */\r\n    nothing = () => new Nothing(),\r\n    returnThis = function (x) { return this; }\r\n    ;\r\n\r\n// Methods\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#valueOf\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.valueOf   = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#join\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.join      = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#map\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.map       = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#ap\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.ap        = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#flatMap\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.flatMap   = returnThis;\r\n\r\n// Set statics\r\n/**\r\n * Applicative `pure` - Same as `new Nothing()`, `Nothing()`, and `nothing()`.\r\n * @memberOf module:maybe.Nothing\r\n * @function module:maybe.Nothing.of\r\n * @static\r\n * @returns {Nothing}\r\n */\r\nNothing.of  = x => new Nothing();\r\n\r\n// Object.freeze makes properties on object immutable\r\n// @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n// Saves us from having to do the following (great!):\r\n// Object.defineProperties(Nothing, {\r\n//     of: {value: () => new Nothing(), enumerable: true},\r\n//     isNothing: {value: isNothing, enumerable: true}\r\n// });\r\nObject.freeze(Nothing);\r\n\r\nexport {isNothing, nothing};\r\n\r\nexport default Nothing;\r\n","/**\r\n * Contains `Just` constructor and associated methods.\r\n */\r\nimport Nothing, {isNothing} from './Nothing';\r\nimport Monad from '../monad/Monad';\r\nimport {isset} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Checks for `Just`.\r\n     * @function module:maybe.isJust\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isJust = x => x instanceof Just,\r\n\r\n    /**\r\n     * Functional constructor (function that returns an instance) for `Just` -\r\n     * Same as `new Just(...)` (just shorter and can be used as a function).\r\n     * @function module:maybe.just\r\n     * @param x {Just|*}\r\n     * @returns {Just}\r\n     */\r\n    just = x => new Just(x),\r\n\r\n    /**\r\n     * Ensures `Just`\r\n     * @function module:maybe.toJust\r\n     * @param x {Just|*}\r\n     * @returns {Just}\r\n     */\r\n    toJust = x => isJust(x) ? x : just(x)\r\n\r\n;\r\n\r\n/**\r\n * @class maybe.Just\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:monad.Monad\r\n */\r\nexport default class Just extends Monad {\r\n    /**\r\n     * Maps incoming function over contained value and\r\n     * returns result wrapped in `Just`.\r\n     * @method module:maybe.Just#map\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Just|Nothing}\r\n     */\r\n    map (fn) {\r\n        const {constructor} = this,\r\n            value = this.valueOf();\r\n        return isset(value) && !isNothing(value) ? constructor.of(fn(value)) :\r\n            constructor.counterConstructor.of(value);\r\n    }\r\n\r\n    /**\r\n     * Applicative pure - Same as `new Just(...)`.\r\n     * @memberOf maybe.Just\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Just}\r\n     */\r\n    static of (x) { return just(x); }\r\n}\r\n\r\n/**\r\n * @static\r\n * @property maybe.Just.counterConstructor {Functor}\r\n */\r\nJust.counterConstructor = Nothing;\r\n","/**\r\n * @module maybe\r\n */\r\nimport Just, {isJust, just} from './Just';\r\nimport Nothing, {isNothing, nothing} from './Nothing';\r\nimport {isset, curry, id, trampoline} from 'fjl';\r\nimport {getMonadUnWrapper} from '../monad/Monad';\r\n\r\nexport {Just, isJust, isNothing, Nothing, just, nothing};\r\n\r\nconst\r\n    /**\r\n     * @private\r\n     */\r\n    [justUnWrapper, justUnWrapperTailCallName] = getMonadUnWrapper(Just)\r\n;\r\n\r\nexport const\r\n    /**\r\n     * The maybe function takes a `replacement` value, a function (unary operation), and a Maybe value. If the Maybe value is `Nothing`, the function returns the `replacement` value. Otherwise, it applies the function to the value contained  by the `Just` and returns the result.\r\n     * @function module:maybe.maybe\r\n     * @param replacement {*}\r\n     * @param fn {Function} - Unary operation.\r\n     * @param maybeInst {(Nothing|Just|*)} - Maybe instance or non-maybe value.\r\n     * @returns {*}\r\n     */\r\n    maybe = curry((replacement, fn, maybeInst) => {\r\n        const subject = isset(maybeInst) && isMaybe(maybeInst) ? maybeInst.map(id) : nothing();\r\n        return isNothing(subject) ? replacement : subject.map(fn).join();\r\n    }),\r\n\r\n    /**\r\n     * Unwraps just (recursively).\r\n     * @function module:maybe.unWrapJust\r\n     * @param x {*} - Expected `Just`.\r\n     * @returns {*}\r\n     */\r\n    unWrapJust = trampoline(justUnWrapper, justUnWrapperTailCallName),\r\n\r\n    /**\r\n     * Unwraps maybe (recursively).\r\n     * @function module:maybe.unWrapMaybe\r\n     * @param x {*} - Expected `Maybe`.\r\n     * @returns {*}\r\n     */\r\n    unWrapMaybe = x => isNothing(x) ? nothing() : unWrapJust(x),\r\n\r\n    /**\r\n     * Equality operator for maybes.\r\n     * @function module:maybe.maybeEqual\r\n     * @param a {*} - Maybe 1.\r\n     * @param b {*} - Maybe 2.\r\n     * @returns {boolean}\r\n     */\r\n    maybeEqual = curry((a, b) => unWrapMaybe(a) === unWrapMaybe(b)),\r\n\r\n    /**\r\n     * Checks for maybe.\r\n     * @function module:maybe.isMaybe\r\n     *  @param x {*}.\r\n     * @returns {boolean}\r\n     */\r\n    isMaybe = x => isNothing(x) || isJust(x),\r\n\r\n    /**\r\n     * Creates maybe from value.\r\n     * @function module:maybe.toMaybe\r\n     * @param x {*}\r\n     * @returns {Maybe} - `Just` or `Nothing` based on value.\r\n     */\r\n    toMaybe = x => {\r\n        if (!isset(x)) {\r\n            return nothing();\r\n        }\r\n        return isMaybe(x) ? x : just(x);\r\n    }\r\n;\r\n","/**\r\n * Contains `Either` constructs (`Right`, `Left`,  `either` etc.) and associated operations.\r\n * Created by elyde on 12/10/2016.\r\n * @module either\r\n */\r\nimport {isset, curry, id, toFunction} from 'fjl';\r\nimport {Just} from '../maybe/Maybe';\r\nimport Monad, {toMonad} from '../monad/Monad';\r\n\r\n/**\r\n * `Left` representation of `Either` construct.\r\n * @class module:either.Left\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:monad.Monad\r\n */\r\nexport class Left extends Monad {\r\n    /**\r\n     * Same as `new Left(...)`.\r\n     * @memberOf module:either.Left\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Left}\r\n     */\r\n    static of (x) { return new Left(x); }\r\n}\r\n\r\n/**\r\n * @class module:either.Right\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:maybe.Just\r\n */\r\nexport class Right extends Just {\r\n    /**\r\n     * Maps a function over contained value and returns result wrapped.\r\n     * @function module:either.Right#map\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Either}\r\n     */\r\n    map (fn) {\r\n        const value = this.valueOf();\r\n        if (isLeft(value)) {\r\n            return value;\r\n        }\r\n        else if (!isset(value)) {\r\n            return Left.of(\r\n                `TypeError: Cannot operate on \\`${value}\\`.`\r\n            );\r\n        }\r\n        return Right.of(fn(value));\r\n    }\r\n\r\n    /**\r\n     * Same as `new Right(...)`.\r\n     * @memberOf module:either.Right\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Right}\r\n     */\r\n    static of (x) { return new Right(x); }\r\n}\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a new `Left`\r\n     * @function module:either.left\r\n     * @param x {*}\r\n     * @returns {Left}\r\n     */\r\n    left = x => new Left(x),\r\n\r\n    /**\r\n     * Returns a `Right`.\r\n     * @function module:either.right\r\n     * @param x {*}\r\n     * @returns {Right}\r\n     */\r\n    right = x => new Right(x),\r\n\r\n    /**\r\n     * Checks for instance of `Right` constructor.\r\n     * @function module:either.isRight\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isRight = x => x instanceof Right,\r\n\r\n    /**\r\n     * Checks for instance of `Left` constructor.\r\n     * @function module:either.isLeft\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isLeft = x => x instanceof Left,\r\n\r\n    /**\r\n     * Returns a `Right` - if not a `Right` creates one from given, else returns given.\r\n     * @function module:either.toRight\r\n     * @param x {*}\r\n     * @returns {Right}\r\n     */\r\n    toRight = x => isRight(x) ? x : right(x),\r\n\r\n    /**\r\n     * Returns a `Left` - if not a `Left` creates one from given, else returns given.\r\n     * @function module:either.toLeft\r\n     * @param x {*}\r\n     * @returns {Left}\r\n     */\r\n    toLeft = x => isLeft(x) ? x : left(x),\r\n\r\n    /**\r\n     * Converts given to an either (`Right`|`Left`)\r\n     * @function module:either.toEither\r\n     * @param x {*}\r\n     * @returns {Left|Right}\r\n     */\r\n    toEither = x => isLeft(x) || isRight(x) ? x : right(x).map(id),\r\n\r\n    /**\r\n     * Calls matching callback on incoming `Either`'s type;  If is a `Left`\r\n     * (after mapping identity func on it) then calls left-callback and unwraps result\r\n     * else calls right-callback and does the same.  Think of it like a functional\r\n     * ternary statement (lol).\r\n     * @function module:either.either\r\n     * @param leftCallback {Function} - Mapped over value of `monad`'s identity.\r\n     * @param rightCallback {Function} - \"\".\r\n     * @param _either_ {Either|*}\r\n     * @return {*} - Value of unwrapped resulting value of `flatMap`ped, passed-in callback's on passed in monad.\r\n     * @example\r\n     * expect(\r\n         either(() => 404, () => 200, compose(right, right, right, right)(true))\r\n       ).toEqual(undefined);\r\n     */\r\n    either = curry((leftCallback, rightCallback, _either_) => {\r\n        const identity = toEither(_either_).flatMap(id),\r\n            out = isRight(_either_) ?\r\n                identity.flatMap(toFunction(rightCallback)) :\r\n                identity.flatMap(leftCallback)\r\n            ;\r\n        return isset(out) ? out.join() : out;\r\n    })\r\n\r\n;\r\n","/**\r\n * Makes all module members in library accessible via itself (is also the main export of the library).\r\n * Created by elydelacruz on 2/19/2017.\r\n * @module fjlDataCore\r\n */\r\nimport Functor from './functor/Functor';\r\nimport Apply from './functor/Apply';\r\nimport Applicative from './functor/Applicative';\r\nimport Bifunctor from './functor/Bifunctor';\r\nimport Monad, {isMonad, valueOf, join, fmap,\r\n    ap, flatMap, getMonadUnWrapper} from './monad/Monad';\r\nimport IO from './io/IO';\r\n\r\nexport {\r\n    Functor, Apply, Applicative, Bifunctor, IO, Monad,\r\n    isMonad, valueOf, join, fmap, ap, flatMap, getMonadUnWrapper\r\n};\r\n\r\nexport * from './maybe/Maybe';\r\nexport * from './either/Either';\r\n\r\n/* ==================================== */\r\n/* Virtual types */\r\n/* ==================================== */\r\n/**\r\n * @typedef {Function} UnaryOperation\r\n */\r\n\r\n/**\r\n * @typedef {Just|Nothing} Maybe\r\n */\r\n\r\n/**\r\n * @typedef {Left|Right} Either\r\n */\r\n"],"names":["Functor","constructor","value","valueOf","map","fn","fmap","Apply","ap","x","toFunction","Applicative","of","Bifunctor","value1","value2","value2Of","first","second","bimap","fn1","fn2","isMonad","Monad","join","curry","applicative","functor","flatMap","monad","getMonadUnWrapper","Type","unWrapMonadByType","instanceOf","trampolineCall","isset","unWrapper","tailCallName","unwrap","trampoline","out","chain","IO","unWrapIO","io","isIO","do","args","instance","compose","NothingSingleton","Nothing","undefined","Object","freeze","isNothing","nothing","returnThis","prototype","isJust","Just","just","counterConstructor","justUnWrapper","justUnWrapperTailCallName","maybe","replacement","maybeInst","subject","isMaybe","id","unWrapJust","unWrapMaybe","maybeEqual","a","b","toMaybe","Left","Right","isLeft","left","right","isRight","toRight","toLeft","toEither","either","leftCallback","rightCallback","_either_","identity"],"mappings":"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"}