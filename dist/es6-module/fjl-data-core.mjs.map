{"version":3,"file":"fjl-data-core.mjs","sources":["../../src/functor/Functor.js","../../src/functor/Apply.js","../../src/functor/Applicative.js","../../src/functor/Bifunctor.js","../../src/monad/Monad.js","../../src/io/IO.js","../../src/maybe/Nothing.js","../../src/maybe/Just.js","../../src/maybe/Maybe.js","../../src/either/Either.js"],"sourcesContent":["/**\r\n * Functor class and associated operations.\r\n * Created by edlc on 12/9/16.\r\n * @module functor\r\n */\r\n\r\n/**\r\n * Always returns a functor;  If given value is not\r\n * a functor creates one from given value to it.\r\n * @function module:functor.toFunctor\r\n * @param x {{map: Function}|*} - Functor or any.\r\n * @returns {*}\r\n */\r\nexport const toFunctor = x => !x.map ? new Functor(x) : x;\r\n\r\n/**\r\n * Plain old functor class.\r\n * @class module:functor.Functor\r\n * @param value {*}\r\n * @property value {*}\r\n */\r\nexport default class Functor {\r\n\r\n    /**\r\n     * @constructor\r\n     * @param value {*}\r\n     */\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * Extracts value of functor (same as monadic `join`).\r\n     * @method module:functor.Functor#valueOf\r\n     * @returns {*}\r\n     */\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * Maps a function over contents of functor.\r\n     * @method module:functor.Functor#map\r\n     * @param fn {Function} - Function that takes one `any` and returns one `any`.\r\n     * @returns {Functor}\r\n     */\r\n    map(fn) {\r\n        return new this.constructor(fn(this.valueOf()));\r\n    }\r\n\r\n    /**\r\n     * Same as `#Functor.map`.\r\n     * @method module:functor.Functor#fmap\r\n     * @param fn {Function}\r\n     * @returns {Functor}\r\n     */\r\n    fmap (fn) {\r\n        return this.map(fn);\r\n    }\r\n}\r\n","/**\r\n * Contains `Applicative`'s `Apply` class (class that contains `ap` (a.k.a. `pure`) method).\r\n * Created by edlc on 12/9/16.\r\n * @memberOf module:functor\r\n */\r\n\r\nimport {toFunction} from 'fjl';\r\nimport Functor from './Functor';\r\n\r\n/**\r\n * Apply construct.\r\n * @class module:functor.Apply\r\n * @param fn {Function|*}\r\n * @property value {*}\r\n * @extends module:functor.Functor\r\n */\r\nexport default class Apply extends Functor {\r\n    /**\r\n     * Applicative apply operation - applies contained function over passed in functor.\r\n     * @method module:functor.Apply#ap\r\n     * @param x {Functor}\r\n     * @returns {Apply}\r\n     */\r\n    ap (x) {\r\n        return x.map(toFunction(this.valueOf()));\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * Applicative class module.\r\n * @memberOf module:functor\r\n */\r\nimport Apply from './Apply';\r\n\r\n/**\r\n * @class module:functor.Applicative\r\n * @extends module:functor.Apply\r\n */\r\nexport default class Applicative extends Apply {\r\n    /**\r\n     * Constructs an applicative with given `value`.\r\n     * @method module:functor.Applicative.of\r\n     * @param value {*}\r\n     * @returns {Applicative}\r\n     * @static\r\n     */\r\n    static of (value) {\r\n        return new Applicative(value);\r\n    }\r\n\r\n    static liftA2 (fn, appA, appB) {\r\n        return appA.constructor.of(\r\n            fn(appA.valueOf(), appB.valueOf)\r\n        );\r\n    }\r\n\r\n    static apRight (appA, appB) {\r\n        return appB;\r\n    }\r\n\r\n    static apLeft (appA, appB) {\r\n        return appA;\r\n    }\r\n}\r\n\r\nexport const\r\n\r\n    pureApp = Applicative.of,\r\n\r\n    liftA2 = Applicative.liftA2,\r\n\r\n    apLeft = Applicative.apLeft,\r\n\r\n    apRight = Applicative.apRight\r\n\r\n;\r\n\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * @memberOf module:functor\r\n */\r\nimport Functor from './Functor';\r\n\r\n/**\r\n * Bifunctor class;  Mostly useful for eithers and/or maybes.\r\n * @class module:functor.Bifunctor\r\n * @param value1 {*}\r\n * @param value2 {*}\r\n * @property value {*}\r\n * @property value2 {*}\r\n * @extends module:functor.Functor\r\n */\r\nexport default class Bifunctor extends Functor {\r\n\r\n    /**\r\n     * @param value1 {*}\r\n     * @param value2 {*}\r\n     * @private\r\n     * @returns {Bifunctor}\r\n     */\r\n    constructor(value1, value2) {\r\n        super(value1);\r\n        this.value2 = value2;\r\n    }\r\n\r\n    /**\r\n     * Returns wrapped 'second' value.\r\n     * @method module:functor.Bifunctor#value2Of\r\n     * @returns {*}\r\n     */\r\n    value2Of() {\r\n        return this.value2;\r\n    }\r\n\r\n    /**\r\n     * Allows you to map over first 'contained' value.\r\n     * @method module:functor.Bifunctor#first\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Bifunctor}\r\n     */\r\n    first (fn) {\r\n        return new this.constructor(fn(this.valueOf()), this.value2Of());\r\n    }\r\n\r\n    /**\r\n     * Allows you to map over second 'contained' value.\r\n     * @method module:functor.Bifunctor#second\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Bifunctor}\r\n     */\r\n    second (fn) {\r\n        return new this.constructor(this.valueOf(), fn(this.value2Of()));\r\n    }\r\n\r\n    /**\r\n     * Allows you to map 2 functions over contained values - One function over each value.\r\n     * @method module:functor.Bifunctor#bimap\r\n     * @param fn1 {Function} - Unary op.\r\n     * @param fn2 {Function} - Unary op.\r\n     * @returns {Bifunctor}\r\n     */\r\n    bimap (fn1, fn2) {\r\n        return new this.constructor(\r\n            fn1(this.valueOf()),\r\n            fn2(this.value2Of())\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Created by edlc on 12/9/16.\r\n * Contains basic `Monad` class and associated methods.\r\n * For 'what is a monad'/back-story\r\n * @see `Maybe` reference: [http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Maybe.html](http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Maybe.html)\r\n * @see `Either` reference: [http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Either.html](http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Either.html)\r\n * @module monad\r\n */\r\n\r\nimport {isset, curry, instanceOf, trampoline} from 'fjl';\r\nimport Applicative from '../functor/Applicative';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns boolean indicating whether given value is an\r\n     * instance of monad or not.\r\n     * @function module:monad.isMonad\r\n     * @param value {*}\r\n     * @returns {boolean}\r\n     */\r\n    isMonad = value => value && value instanceof Monad,\r\n\r\n    /**\r\n     * Always returns a monad;  If given value is not\r\n     * a monad creates one using given value.\r\n     * @function module:monad.toMonad\r\n     * @param x {Monad|*} - Monad or any.\r\n     * @returns {*}\r\n     */\r\n    toMonad = x => !isMonad(x) ? new Monad(x) : x,\r\n\r\n    /**\r\n     * Calls `valueOf` on value (use for functional composition).\r\n     * @function module:monad.valueOf\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    valueOf = x => x.valueOf(),\r\n\r\n    /**\r\n     * Calls `valueOf` on given value.  Same as\r\n     * monadic `join` operation (extracts inner value of\r\n     * container/object).\r\n     * @function module:monad.join\r\n     * @param x {*}\r\n     * @returns {*}\r\n     */\r\n    join = valueOf,\r\n\r\n    /**\r\n     * Maps given function over given functor.\r\n     * @function module:monad.fmap\r\n     * @param fn {Function}\r\n     * @param x {Functor}\r\n     * @returns {Functor}\r\n     */\r\n    fmap = curry((fn, x) => x.map(fn)),\r\n\r\n    /**\r\n     * Applies function contained by applicative to contents of given functor.\r\n     * (Same as functional applicative `apply`).\r\n     * @function module:monad.ap\r\n     * @param applicative {Applicative}\r\n     * @param functor {Functor}\r\n     * @returns {Applicative}\r\n     */\r\n    ap = curry((applicative, functor) => applicative.ap(functor)),\r\n\r\n    /**\r\n     * Flat maps a function over given monad's contained value.\r\n     * @function module:monad.flatMap\r\n     * @param fn {Function}\r\n     * @param monad {Monad}\r\n     * @returns {Monad}\r\n     */\r\n    flatMap = curry((fn, monad) => monad.flatMap(fn)),\r\n\r\n    /**\r\n     * A recursive monad un-wrapper - Returns monad's unwrapped, inner-mostly, contained value (recursively).\r\n     * @function module:monad.getMonadUnWrapper\r\n     * @param Type {Function}\r\n     * @returns {Array.<*>} - [unWrapFunction, tailCallFuncName (used by `trampoline` @see module:fjl.trampoline)]\r\n     */\r\n    getMonadUnWrapper = Type => {\r\n        return [ function unWrapMonadByType(monad) {\r\n                return instanceOf(Type, monad) ?\r\n                    function trampolineCall() {\r\n                        return unWrapMonadByType(monad.valueOf());\r\n                    } :\r\n                    monad;\r\n            }, 'trampolineCall' ];\r\n    },\r\n\r\n    /**\r\n     * Unwraps monad by type.\r\n     * @function module:monad.unWrapMonadByType\r\n     * @param Type {Function}\r\n     * @param monad {Monad}\r\n     * @returns {*}\r\n     */\r\n    unWrapMonadByType = (Type, monad) => {\r\n        if (!isset(monad)) {\r\n            return monad;\r\n        }\r\n        const [unWrapper, tailCallName] = getMonadUnWrapper(Type),\r\n            unwrap = trampoline(unWrapper, tailCallName);\r\n        return unwrap(monad);\r\n    };\r\n\r\n/**\r\n * @class module:monad.Monad\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:functor.Applicative\r\n */\r\nexport default class Monad extends Applicative {\r\n    /**\r\n     * Monadic join - Removes one layer of monadic structure from value.\r\n     * @memberOf module:monad.Monad\r\n     * @returns {*}\r\n     */\r\n    join () {\r\n        return this.valueOf();\r\n    }\r\n\r\n    /**\r\n     * Flat map operation.\r\n     * @memberOf module:monad.Monad\r\n     * @param fn {Function}\r\n     * @returns {Monad}\r\n     */\r\n    flatMap (fn) {\r\n        const out = unWrapMonadByType(this.constructor, fn(this.join()));\r\n        return this.constructor.of(out);\r\n    }\r\n\r\n    /**\r\n     * Same as `Monad.flatMap`.\r\n     * @memberOf module:monad.Monad\r\n     * @param fn {Function}\r\n     * @returns {Monad}\r\n     */\r\n    chain (fn) {\r\n        return this.flatMap(fn);\r\n    }\r\n\r\n    /**\r\n     * Same as `new Monad(...)` just in 'static' function\r\n     * format.\r\n     * @memberOf module:monad.Monad\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Monad}\r\n     */\r\n    static of (x) { return new Monad(x); }\r\n}\r\n","/**\r\n * Created by elydelacruz on 2/19/2017.\r\n * Io module - Contains `IO` class.\r\n * Fore more on io class\r\n * @see http://learnyouahaskell.com/input-and-output\r\n * @module io\r\n */\r\n\r\nimport Monad, {unWrapMonadByType} from '../monad/Monad';\r\nimport {compose, toFunction} from 'fjl';\r\n\r\n/**\r\n * @class io.IO\r\n * @param fn {Function} - Operation to contain within `IO`\r\n * @property `value` {*} - `IO` however wraps non-function values to `function` on construction.\r\n * @extends module:monad.Monad\r\n */\r\nexport default class IO extends Monad {\r\n    /**\r\n     * Unwraps an `IO`.\r\n     * @function module:io.IO.unWrapIO\r\n     * @static\r\n     * @param io {IO}\r\n     * @returns {*}\r\n     */\r\n    static unWrapIO (io) {\r\n        if (!IO.isIO(io)) { return io; }\r\n        return unWrapMonadByType(IO, io);\r\n    }\r\n\r\n    /**\r\n     * Applicative pure;  Same as `new IO(...)`.\r\n     * @function module:io.IO.of\r\n     * @static\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {IO}\r\n     */\r\n    static of(fn) {\r\n        return new IO(fn);\r\n    }\r\n\r\n    /**\r\n     * Checks for `IO`.\r\n     * @function module:io.IO.isIO\r\n     * @static\r\n     * @param x {*}.\r\n     * @returns {boolean}\r\n     */\r\n    static isIO (x) {\r\n        return x instanceof IO;\r\n    }\r\n\r\n    /**\r\n     * Performs io.\r\n     * @function module:io.IO.isIO\r\n     * @static\r\n     * @param io {IO}.\r\n     * @param args {...*} {IO}.\r\n     * @returns {boolean}\r\n     */\r\n    static do (io, ...args) {\r\n        const instance = !IO.isIO(io) ? new IO(io) : io;\r\n        return compose(\r\n            IO.of,\r\n            IO.unWrapIO\r\n        )(\r\n            toFunction(instance.join())(...args)\r\n        );\r\n    }\r\n\r\n    constructor(fn) {\r\n        super(toFunction(fn));\r\n    }\r\n\r\n    /**\r\n     * Maps incoming function onto contained, innermost, value\r\n     * and returns a new `IO` which will containe the result of calling incoming function on originally contained value - A.k.a - flat-map operation.\r\n     * @memberOf module:io.IO\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {IO}\r\n     */\r\n    flatMap (fn) {\r\n        return compose(\r\n            this.constructor.of,\r\n            IO.unWrapIO, fn,\r\n            IO.unWrapIO\r\n        )(\r\n            toFunction(this.join())()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Maps incoming function on contained value and returns\r\n     * a new `IO` container containing result of unary operation (incoming-function's result).\r\n     * @memberOf module:io.IO\r\n     * @param fn {Function}\r\n     * @returns {IO}\r\n     */\r\n    map (fn) {\r\n        return compose(\r\n            this.constructor.of,\r\n            fn\r\n        )(\r\n            toFunction(this.valueOf())()\r\n        );\r\n    }\r\n}\r\n","let NothingSingleton;\r\n\r\n/**\r\n * Constructor and function for creating/fetching `Nothing`.\r\n * @note Nothing always returns a singleton instance of `Nothing` (whether calling `Nothing` with new or as a\r\n * function.\r\n * @function module:maybe.Nothing\r\n * @param [x=undefined]{*} - Ignored.\r\n * @returns {Nothing}\r\n * @constructor\r\n * @memberOf module:maybe\r\n */\r\nfunction Nothing (x = undefined) {\r\n    if (NothingSingleton) {\r\n        return NothingSingleton;\r\n    }\r\n    else if (!(this instanceof Nothing)) {\r\n        return new Nothing();\r\n    }\r\n    NothingSingleton = this;\r\n    Object.freeze(NothingSingleton);\r\n}\r\n\r\n// Documented further below\r\nconst\r\n\r\n    /**\r\n     * Checks for `Nothing`.\r\n     * @function module:maybe.isNothing\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isNothing = x => x === NothingSingleton,\r\n\r\n    /**\r\n     * Returns `Nothing`.\r\n     * @function module:maybe.nothing\r\n     * @returns {Nothing}\r\n     */\r\n    nothing = () => new Nothing(),\r\n    returnThis = function (x) { return this; }\r\n    ;\r\n\r\n// Methods\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#valueOf\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.valueOf   = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#join\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.join      = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#map\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.map       = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#ap\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.ap        = returnThis;\r\n/**\r\n * Returns `Nothing`.\r\n * @method module:maybe.Nothing#flatMap\r\n * @returns {Nothing}\r\n */\r\nNothing.prototype.flatMap   = returnThis;\r\n\r\n// Set statics\r\n/**\r\n * Applicative `pure` - Same as `new Nothing()`, `Nothing()`, and `nothing()`.\r\n * @memberOf module:maybe.Nothing\r\n * @function module:maybe.Nothing.of\r\n * @static\r\n * @returns {Nothing}\r\n */\r\nNothing.of  = x => new Nothing();\r\n\r\n// Object.freeze makes properties on object immutable\r\n// @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n// Saves us from having to do the following (great!):\r\n// Object.defineProperties(Nothing, {\r\n//     of: {value: () => new Nothing(), enumerable: true},\r\n//     isNothing: {value: isNothing, enumerable: true}\r\n// });\r\nObject.freeze(Nothing);\r\n\r\nexport {isNothing, nothing};\r\n\r\nexport default Nothing;\r\n","/**\r\n * Contains `Just` constructor and associated methods.\r\n */\r\nimport Nothing, {isNothing} from './Nothing';\r\nimport Monad from '../monad/Monad';\r\nimport {isset} from 'fjl';\r\n\r\nexport const\r\n\r\n    /**\r\n     * Checks for `Just`.\r\n     * @function module:maybe.isJust\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isJust = x => x instanceof Just,\r\n\r\n    /**\r\n     * Functional constructor (function that returns an instance) for `Just` -\r\n     * Same as `new Just(...)` (just shorter and can be used as a function).\r\n     * @function module:maybe.just\r\n     * @param x {Just|*}\r\n     * @returns {Just}\r\n     */\r\n    just = x => new Just(x),\r\n\r\n    /**\r\n     * Ensures `Just`\r\n     * @function module:maybe.toJust\r\n     * @param x {Just|*}\r\n     * @returns {Just}\r\n     */\r\n    toJust = x => isJust(x) ? x : just(x)\r\n\r\n;\r\n\r\n/**\r\n * @class maybe.Just\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:monad.Monad\r\n */\r\nexport default class Just extends Monad {\r\n    /**\r\n     * Maps incoming function over contained value and\r\n     * returns result wrapped in `Just`.\r\n     * @method module:maybe.Just#map\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Just|Nothing}\r\n     */\r\n    map (fn) {\r\n        const {constructor} = this,\r\n            value = this.valueOf();\r\n        return isset(value) && !isNothing(value) ? constructor.of(fn(value)) :\r\n            constructor.counterConstructor.of(value);\r\n    }\r\n\r\n    /**\r\n     * Applicative pure - Same as `new Just(...)`.\r\n     * @method module:maybe.Just.of\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Just}\r\n     */\r\n    static of (x) { return just(x); }\r\n}\r\n\r\n/**\r\n * @static\r\n * @member {Functor} module:maybe.Just.counterConstructor\r\n */\r\nJust.counterConstructor = Nothing;\r\n","/**\r\n * @module maybe\r\n */\r\nimport Just, {isJust, just} from './Just';\r\nimport Nothing, {isNothing, nothing} from './Nothing';\r\nimport {isset, curry, id, trampoline} from 'fjl';\r\nimport {getMonadUnWrapper} from '../monad/Monad';\r\n\r\nexport {Just, isJust, isNothing, Nothing, just, nothing};\r\n\r\nconst\r\n    /**\r\n     * @private\r\n     */\r\n    [justUnWrapper, justUnWrapperTailCallName] = getMonadUnWrapper(Just)\r\n;\r\n\r\nexport const\r\n    /**\r\n     * The maybe function takes a `replacement` value, a function (unary operation), and a Maybe value. If the Maybe value is `Nothing`, the function returns the `replacement` value. Otherwise, it applies the function to the value contained  by the `Just` and returns the result.\r\n     * @function module:maybe.maybe\r\n     * @param replacement {*}\r\n     * @param fn {Function} - Unary operation.\r\n     * @param maybeInst {(Nothing|Just|*)} - Maybe instance or non-maybe value.\r\n     * @returns {*}\r\n     */\r\n    maybe = curry((replacement, fn, maybeInst) => {\r\n        const subject = isset(maybeInst) && isMaybe(maybeInst) ? maybeInst.map(id) : nothing();\r\n        return isNothing(subject) ? replacement : subject.map(fn).join();\r\n    }),\r\n\r\n    /**\r\n     * Unwraps just (recursively).\r\n     * @function module:maybe.unWrapJust\r\n     * @param x {*} - Expected `Just`.\r\n     * @returns {*}\r\n     */\r\n    unWrapJust = trampoline(justUnWrapper, justUnWrapperTailCallName),\r\n\r\n    /**\r\n     * Unwraps maybe (recursively).\r\n     * @function module:maybe.unWrapMaybe\r\n     * @param x {*} - Expected `Maybe`.\r\n     * @returns {*}\r\n     */\r\n    unWrapMaybe = x => isNothing(x) ? nothing() : unWrapJust(x),\r\n\r\n    /**\r\n     * Equality operator for maybes.\r\n     * @function module:maybe.maybeEqual\r\n     * @param a {*} - Maybe 1.\r\n     * @param b {*} - Maybe 2.\r\n     * @returns {boolean}\r\n     */\r\n    maybeEqual = curry((a, b) => unWrapMaybe(a) === unWrapMaybe(b)),\r\n\r\n    /**\r\n     * Checks for maybe.\r\n     * @function module:maybe.isMaybe\r\n     *  @param x {*}.\r\n     * @returns {boolean}\r\n     */\r\n    isMaybe = x => isNothing(x) || isJust(x),\r\n\r\n    /**\r\n     * Creates maybe from value.\r\n     * @function module:maybe.toMaybe\r\n     * @param x {*}\r\n     * @returns {Maybe} - `Just` or `Nothing` based on value.\r\n     */\r\n    toMaybe = x => {\r\n        if (!isset(x)) {\r\n            return nothing();\r\n        }\r\n        return isMaybe(x) ? x : just(x);\r\n    }\r\n;\r\n","/**\r\n * Contains `Either` constructs (`Right`, `Left`,  `either` etc.) and associated operations.\r\n * Created by elyde on 12/10/2016.\r\n * @module either\r\n */\r\nimport {isset, curry, id, toFunction} from 'fjl';\r\nimport {Just} from '../maybe/Maybe';\r\nimport Monad from '../monad/Monad';\r\n\r\n/**\r\n * `Left` representation of `Either` construct.\r\n * @class module:either.Left\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:monad.Monad\r\n */\r\nexport class Left extends Monad {\r\n    /**\r\n     * Same as `new Left(...)`.\r\n     * @method module:either.Left.of\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Left}\r\n     */\r\n    static of (x) { return new Left(x); }\r\n}\r\n\r\n/**\r\n * @class module:either.Right\r\n * @param x {*}\r\n * @property value {*}\r\n * @extends module:maybe.Just\r\n */\r\nexport class Right extends Just {\r\n    /**\r\n     * Maps a function over contained value and returns result wrapped.\r\n     * @method module:either.Right#map\r\n     * @param fn {Function} - Unary operation.\r\n     * @returns {Either}\r\n     */\r\n    map (fn) {\r\n        const value = this.valueOf();\r\n        if (isLeft(value)) {\r\n            return value;\r\n        }\r\n        else if (!isset(value)) {\r\n            return Left.of(\r\n                `TypeError: Cannot operate on \\`${value}\\`.`\r\n            );\r\n        }\r\n        return Right.of(fn(value));\r\n    }\r\n\r\n    /**\r\n     * Same as `new Right(...)`.\r\n     * @method module:either.Right.of\r\n     * @static\r\n     * @param x {*}\r\n     * @returns {Right}\r\n     */\r\n    static of (x) { return new Right(x); }\r\n}\r\n\r\nexport const\r\n\r\n    /**\r\n     * Returns a new `Left`\r\n     * @function module:either.left\r\n     * @param x {*}\r\n     * @returns {Left}\r\n     */\r\n    left = x => new Left(x),\r\n\r\n    /**\r\n     * Returns a `Right`.\r\n     * @function module:either.right\r\n     * @param x {*}\r\n     * @returns {Right}\r\n     */\r\n    right = x => new Right(x),\r\n\r\n    /**\r\n     * Checks for instance of `Right` constructor.\r\n     * @function module:either.isRight\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isRight = x => x instanceof Right,\r\n\r\n    /**\r\n     * Checks for instance of `Left` constructor.\r\n     * @function module:either.isLeft\r\n     * @param x {*}\r\n     * @returns {boolean}\r\n     */\r\n    isLeft = x => x instanceof Left,\r\n\r\n    /**\r\n     * Returns a `Right` - if not a `Right` creates one from given, else returns given.\r\n     * @function module:either.toRight\r\n     * @param x {*}\r\n     * @returns {Right}\r\n     */\r\n    toRight = x => isRight(x) ? x : right(x),\r\n\r\n    /**\r\n     * Returns a `Left` - if not a `Left` creates one from given, else returns given.\r\n     * @function module:either.toLeft\r\n     * @param x {*}\r\n     * @returns {Left}\r\n     */\r\n    toLeft = x => isLeft(x) ? x : left(x),\r\n\r\n    /**\r\n     * Converts given to an either (`Right`|`Left`)\r\n     * @function module:either.toEither\r\n     * @param x {*}\r\n     * @returns {Left|Right}\r\n     */\r\n    toEither = x => isLeft(x) || isRight(x) ? x : right(x).map(id),\r\n\r\n    /**\r\n     * Calls matching callback on incoming `Either`'s type;  If is a `Left`\r\n     * (after mapping identity func on it) then calls left-callback and unwraps result\r\n     * else calls right-callback and does the same.  Think of it like a functional\r\n     * ternary statement (lol).\r\n     * @function module:either.either\r\n     * @param leftCallback {Function} - Mapped over value of `monad`'s identity.\r\n     * @param rightCallback {Function} - \"\".\r\n     * @param _either_ {Either|*}\r\n     * @return {*} - Value of unwrapped resulting value of `flatMap`ped, passed-in callback's on passed in monad.\r\n     * @example\r\n     * expect(\r\n         either(() => 404, () => 200, compose(right, right, right, right)(true))\r\n       ).toEqual(undefined);\r\n     */\r\n    either = curry((leftCallback, rightCallback, _either_) => {\r\n        const identity = toEither(_either_).flatMap(id),\r\n            out = isRight(_either_) ?\r\n                identity.flatMap(toFunction(rightCallback)) :\r\n                identity.flatMap(leftCallback)\r\n            ;\r\n        return isset(out) ? out.join() : out;\r\n    })\r\n\r\n;\r\n"],"names":["Functor","constructor","value","valueOf","map","fn","fmap","Apply","ap","x","toFunction","Applicative","of","liftA2","appA","appB","apRight","apLeft","Bifunctor","value1","value2","value2Of","first","second","bimap","fn1","fn2","isMonad","Monad","join","curry","applicative","functor","flatMap","monad","getMonadUnWrapper","Type","unWrapMonadByType","instanceOf","trampolineCall","isset","unWrapper","tailCallName","unwrap","trampoline","out","chain","IO","unWrapIO","io","isIO","do","args","instance","compose","NothingSingleton","Nothing","undefined","Object","freeze","isNothing","nothing","returnThis","prototype","isJust","Just","just","counterConstructor","justUnWrapper","justUnWrapperTailCallName","maybe","replacement","maybeInst","subject","isMaybe","id","unWrapJust","unWrapMaybe","maybeEqual","a","b","toMaybe","Left","Right","isLeft","left","right","isRight","toRight","toLeft","toEither","either","leftCallback","rightCallback","_either_","identity"],"mappings":"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"}